#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ Kafka Stress Test –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥–∞
===================================================

–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Fraud Detection API —á–µ—Ä–µ–∑ Kafka:
- –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Prometheus –º–µ—Ç—Ä–∏–∫–∞–º–∏

–¶–µ–ª—å: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥ –æ—Ç 4 –¥–æ 6 —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∏ –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ >80% CPU
–ê–≤—Ç–æ—Ä: ML Engineering Team
"""

import asyncio
import aiohttp
import json
import time
import random
import logging
import argparse
from datetime import datetime, timedelta
from typing import List, Dict, Any
import signal
import sys
from dataclasses import dataclass
from concurrent.futures import ThreadPoolExecutor
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@dataclass
class StressTestConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞"""
    api_url: str = "http://localhost:8000"
    initial_rps: int = 10          # –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (requests per second)
    max_rps: int = 200             # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    ramp_up_duration: int = 300    # –í—Ä–µ–º—è –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)
    sustain_duration: int = 600    # –í—Ä–µ–º—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –ø–∏–∫–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    ramp_down_duration: int = 120  # –í—Ä–µ–º—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
    batch_size: int = 5            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    prometheus_url: str = "http://localhost:9090"
    
class StressTestRunner:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞"""
    
    def __init__(self, config: StressTestConfig):
        self.config = config
        self.current_rps = config.initial_rps
        self.running = True
        self.stats = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'response_times': [],
            'start_time': None,
            'current_replicas': 0,
            'max_replicas_reached': False,
            'high_cpu_detected': False
        }
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ—Å—Ç–∞"""
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç...")
        self.running = False
    
    async def generate_transaction_data(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        transaction_types = [
            "online_purchase", "atm_withdrawal", "pos_payment", 
            "transfer", "bill_payment", "subscription"
        ]
        
        merchant_categories = [
            "grocery", "restaurant", "gas_station", "retail", 
            "electronics", "travel", "entertainment", "healthcare"
        ]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ä–∞–∑–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞
        fraud_probability = random.random()
        
        if fraud_probability < 0.1:  # 10% –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö
            amount = random.uniform(500, 5000)  # –ë–æ–ª—å—à–∏–µ —Å—É–º–º—ã
            hour = random.choice([2, 3, 4, 23, 0, 1])  # –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
            location_risk = random.uniform(0.7, 1.0)  # –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–∏
        else:
            amount = random.uniform(5, 500)  # –û–±—ã—á–Ω—ã–µ —Å—É–º–º—ã
            hour = random.randint(8, 22)  # –î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è
            location_risk = random.uniform(0.0, 0.3)  # –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫
        
        return {
            "transaction_id": f"stress_test_{int(time.time() * 1000)}_{random.randint(1000, 9999)}",
            "amount": round(amount, 2),
            "merchant_category": random.choice(merchant_categories),
            "hour_of_day": hour,
            "day_of_week": datetime.now().weekday(),
            "user_age": random.randint(18, 80),
            "location_risk_score": round(location_risk, 3)
        }
    
    async def send_prediction_request(self, session: aiohttp.ClientSession) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"""
        start_time = time.time()
        
        try:
            transaction_data = await self.generate_transaction_data()
            
            async with session.post(
                f"{self.config.api_url}/predict",
                json=transaction_data,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                
                response_time = time.time() - start_time
                
                if response.status == 200:
                    result = await response.json()
                    self.stats['successful_requests'] += 1
                    self.stats['response_times'].append(response_time)
                    
                    return {
                        'status': 'success',
                        'response_time': response_time,
                        'transaction_id': transaction_data['transaction_id'],
                        'prediction': result
                    }
                else:
                    self.stats['failed_requests'] += 1
                    logger.warning(f"‚ùå Request failed: {response.status}")
                    
                    return {
                        'status': 'failed',
                        'response_time': response_time,
                        'status_code': response.status
                    }
                    
        except asyncio.TimeoutError:
            self.stats['failed_requests'] += 1
            response_time = time.time() - start_time
            logger.warning(f"‚è∞ Request timeout after {response_time:.2f}s")
            
            return {
                'status': 'timeout',
                'response_time': response_time
            }
            
        except Exception as e:
            self.stats['failed_requests'] += 1
            response_time = time.time() - start_time
            logger.error(f"üí• Request error: {e}")
            
            return {
                'status': 'error',
                'response_time': response_time,
                'error': str(e)
            }
        
        finally:
            self.stats['total_requests'] += 1
    
    async def send_batch_requests(self, session: aiohttp.ClientSession, batch_size: int) -> List[Dict]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        tasks = [
            self.send_prediction_request(session)
            for _ in range(batch_size)
        ]
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        processed_results = []
        for result in results:
            if isinstance(result, Exception):
                logger.error(f"üí• Batch request exception: {result}")
                self.stats['failed_requests'] += 1
                processed_results.append({
                    'status': 'exception',
                    'error': str(result)
                })
            else:
                processed_results.append(result)
        
        return processed_results
    
    async def monitor_kubernetes_metrics(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫ Kubernetes —á–µ—Ä–µ–∑ Prometheus"""
        while self.running:
            try:
                async with aiohttp.ClientSession() as session:
                    
                    # –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–ø–ª–∏–∫
                    replicas_query = 'kube_deployment_status_replicas{namespace="fraud-detection", deployment="fraud-detection-api"}'
                    async with session.get(
                        f"{self.config.prometheus_url}/api/v1/query",
                        params={'query': replicas_query}
                    ) as response:
                        if response.status == 200:
                            data = await response.json()
                            if data['data']['result']:
                                current_replicas = int(float(data['data']['result'][0]['value'][1]))
                                self.stats['current_replicas'] = current_replicas
                                
                                if current_replicas >= 6:
                                    self.stats['max_replicas_reached'] = True
                                    logger.warning(f"üî• –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ï –†–ï–ü–õ–ò–ö–ò –î–û–°–¢–ò–ì–ù–£–¢–´: {current_replicas}")
                    
                    # –ó–∞–ø—Ä–æ—Å CPU —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
                    cpu_query = 'rate(container_cpu_usage_seconds_total{namespace="fraud-detection", pod=~"fraud-detection-api-.*"}[5m]) * 100'
                    async with session.get(
                        f"{self.config.prometheus_url}/api/v1/query",
                        params={'query': cpu_query}
                    ) as response:
                        if response.status == 200:
                            data = await response.json()
                            if data['data']['result']:
                                for result in data['data']['result']:
                                    cpu_usage = float(result['value'][1])
                                    pod_name = result['metric']['pod']
                                    
                                    if cpu_usage > 80:
                                        self.stats['high_cpu_detected'] = True
                                        logger.warning(f"üî• –í–´–°–û–ö–ê–Ø CPU –£–¢–ò–õ–ò–ó–ê–¶–ò–Ø: {pod_name} = {cpu_usage:.1f}%")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫: {e}")
            
            await asyncio.sleep(15)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    
    def calculate_current_rps(self, elapsed_time: float) -> int:
        """–†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ RPS –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if elapsed_time < self.config.ramp_up_duration:
            # –§–∞–∑–∞ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
            progress = elapsed_time / self.config.ramp_up_duration
            rps = self.config.initial_rps + (self.config.max_rps - self.config.initial_rps) * progress
            
        elif elapsed_time < self.config.ramp_up_duration + self.config.sustain_duration:
            # –§–∞–∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –ø–∏–∫–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
            rps = self.config.max_rps
            
        elif elapsed_time < self.config.ramp_up_duration + self.config.sustain_duration + self.config.ramp_down_duration:
            # –§–∞–∑–∞ —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
            ramp_down_elapsed = elapsed_time - self.config.ramp_up_duration - self.config.sustain_duration
            progress = ramp_down_elapsed / self.config.ramp_down_duration
            rps = self.config.max_rps - (self.config.max_rps - self.config.initial_rps) * progress
            
        else:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
            rps = self.config.initial_rps
            self.running = False
        
        return max(int(rps), 1)
    
    def print_stats(self, elapsed_time: float):
        """–í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if self.stats['response_times']:
            avg_response_time = sum(self.stats['response_times']) / len(self.stats['response_times'])
            p95_response_time = sorted(self.stats['response_times'])[int(len(self.stats['response_times']) * 0.95)]
        else:
            avg_response_time = 0
            p95_response_time = 0
        
        success_rate = (self.stats['successful_requests'] / max(self.stats['total_requests'], 1)) * 100
        
        print(f"\nüìä –°–¢–†–ï–°–°-–¢–ï–°–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ê (T+{elapsed_time:.0f}s)")
        print("=" * 60)
        print(f"üéØ –¢–µ–∫—É—â–∏–π RPS: {self.current_rps}")
        print(f"üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {self.stats['total_requests']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {self.stats['successful_requests']}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {self.stats['failed_requests']}")
        print(f"üìä Success Rate: {success_rate:.1f}%")
        print(f"‚ö° Avg Response Time: {avg_response_time:.3f}s")
        print(f"üî• P95 Response Time: {p95_response_time:.3f}s")
        print(f"üîÑ –¢–µ–∫—É—â–∏—Ö —Ä–µ–ø–ª–∏–∫: {self.stats['current_replicas']}")
        print(f"üö® –ú–∞–∫—Å. —Ä–µ–ø–ª–∏–∫–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã: {'‚úÖ –î–ê' if self.stats['max_replicas_reached'] else '‚ùå –ù–ï–¢'}")
        print(f"üî• –í—ã—Å–æ–∫–∞—è CPU –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {'‚úÖ –î–ê' if self.stats['high_cpu_detected'] else '‚ùå –ù–ï–¢'}")
        print("=" * 60)
    
    async def run_stress_test(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ Kafka –¥–ª—è Fraud Detection API")
        logger.info(f"üéØ API URL: {self.config.api_url}")
        logger.info(f"üìà –ù–∞–≥—Ä—É–∑–∫–∞: {self.config.initial_rps} ‚Üí {self.config.max_rps} RPS")
        logger.info(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.config.ramp_up_duration + self.config.sustain_duration + self.config.ramp_down_duration}s")
        
        self.stats['start_time'] = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫ –≤ —Ñ–æ–Ω–µ
        monitoring_task = asyncio.create_task(self.monitor_kubernetes_metrics())
        
        async with aiohttp.ClientSession() as session:
            
            while self.running:
                loop_start_time = time.time()
                elapsed_time = loop_start_time - self.stats['start_time']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π RPS
                self.current_rps = self.calculate_current_rps(elapsed_time)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                requests_per_batch = self.config.batch_size
                batches_per_second = self.current_rps / requests_per_batch
                batch_interval = 1.0 / batches_per_second if batches_per_second > 0 else 1.0
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
                batch_results = await self.send_batch_requests(session, requests_per_batch)
                
                # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                if int(elapsed_time) % 30 == 0:
                    self.print_stats(elapsed_time)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
                if self.stats['max_replicas_reached'] and self.stats['high_cpu_detected']:
                    logger.info("üéâ –£–°–ü–ï–•! –î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã –≤—Å–µ —Ü–µ–ª–∏ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞:")
                    logger.info("  ‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ 6 —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤")
                    logger.info("  ‚úÖ CPU –Ω–∞–≥—Ä—É–∑–∫–∞ > 80%")
                    logger.info("  ‚úÖ –ê–ª–µ—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã —Å—Ä–∞–±–æ—Ç–∞—Ç—å")
                    break
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞
                loop_duration = time.time() - loop_start_time
                sleep_time = max(0, batch_interval - loop_duration)
                
                if sleep_time > 0:
                    await asyncio.sleep(sleep_time)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitoring_task.cancel()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_duration = time.time() - self.stats['start_time']
        self.print_final_report(total_duration)
    
    def print_final_report(self, duration: float):
        """–ü–µ—á–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*80)
        print("üèÅ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –°–¢–†–ï–°–°-–¢–ï–°–¢–ê")
        print("="*80)
        
        if self.stats['response_times']:
            avg_response_time = sum(self.stats['response_times']) / len(self.stats['response_times'])
            p95_response_time = sorted(self.stats['response_times'])[int(len(self.stats['response_times']) * 0.95)]
            p99_response_time = sorted(self.stats['response_times'])[int(len(self.stats['response_times']) * 0.99)]
        else:
            avg_response_time = p95_response_time = p99_response_time = 0
        
        success_rate = (self.stats['successful_requests'] / max(self.stats['total_requests'], 1)) * 100
        avg_rps = self.stats['total_requests'] / duration if duration > 0 else 0
        
        print(f"‚è±Ô∏è –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {self.stats['total_requests']}")
        print(f"üìà –°—Ä–µ–¥–Ω–∏–π RPS: {avg_rps:.1f}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {self.stats['successful_requests']}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {self.stats['failed_requests']}")
        print(f"üìä Success Rate: {success_rate:.1f}%")
        print(f"‚ö° Avg Response Time: {avg_response_time:.3f}s")
        print(f"üî• P95 Response Time: {p95_response_time:.3f}s")
        print(f"üå°Ô∏è P99 Response Time: {p99_response_time:.3f}s")
        
        print("\nüéØ –¶–ï–õ–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"üîÑ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ–ø–ª–∏–∫–∏ (6): {'‚úÖ –î–û–°–¢–ò–ì–ù–£–¢–û' if self.stats['max_replicas_reached'] else '‚ùå –ù–ï –î–û–°–¢–ò–ì–ù–£–¢–û'}")
        print(f"üî• –í—ã—Å–æ–∫–∞—è CPU –Ω–∞–≥—Ä—É–∑–∫–∞ (>80%): {'‚úÖ –û–ë–ù–ê–†–£–ñ–ï–ù–û' if self.stats['high_cpu_detected'] else '‚ùå –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û'}")
        
        if self.stats['max_replicas_reached'] and self.stats['high_cpu_detected']:
            print("\nüéâ –°–¢–†–ï–°–°-–¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–ª–µ—Ä—Ç—ã –≤ Prometheus/Grafana –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è")
        else:
            print("\n‚ö†Ô∏è –°–¢–†–ï–°–°-–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –ß–ê–°–¢–ò–ß–ù–û")
            print("üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ HPA")
        
        print("="*80)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='Stress test –¥–ª—è Fraud Detection API')
    parser.add_argument('--api-url', default='http://localhost:8000', help='URL API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--initial-rps', type=int, default=10, help='–ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (RPS)')
    parser.add_argument('--max-rps', type=int, default=200, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (RPS)')
    parser.add_argument('--ramp-up-duration', type=int, default=300, help='–í—Ä–µ–º—è –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)')
    parser.add_argument('--sustain-duration', type=int, default=600, help='–í—Ä–µ–º—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –ø–∏–∫–∞ (—Å–µ–∫—É–Ω–¥—ã)')
    parser.add_argument('--ramp-down-duration', type=int, default=120, help='–í—Ä–µ–º—è —Å–Ω–∏–∂–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)')
    parser.add_argument('--batch-size', type=int, default=5, help='–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤')
    parser.add_argument('--prometheus-url', default='http://localhost:9090', help='URL Prometheus')
    
    args = parser.parse_args()
    
    config = StressTestConfig(
        api_url=args.api_url,
        initial_rps=args.initial_rps,
        max_rps=args.max_rps,
        ramp_up_duration=args.ramp_up_duration,
        sustain_duration=args.sustain_duration,
        ramp_down_duration=args.ramp_down_duration,
        batch_size=args.batch_size,
        prometheus_url=args.prometheus_url
    )
    
    runner = StressTestRunner(config)
    await runner.run_stress_test()

if __name__ == "__main__":
    asyncio.run(main())
