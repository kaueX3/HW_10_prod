apiVersion: apps/v1
kind: Deployment
metadata:
  name: fraud-detection-api
  namespace: fraud-detection
  labels:
    app.kubernetes.io/name: fraud-detection
    app.kubernetes.io/component: api
    app.kubernetes.io/version: "demo"
spec:
  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–ª–∏–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ HPA
  replicas: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fraud-detection
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fraud-detection
        app.kubernetes.io/component: api
        app.kubernetes.io/version: "demo"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: fraud-detection-api
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–∑ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π ML API
        image: nginx:alpine
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        
        # –†–µ—Å—É—Ä—Å—ã –¥–ª—è HPA
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
        
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π API
        volumeMounts:
        - name: api-content
          mountPath: /usr/share/nginx/html
        
        # Security context
        securityContext:
          runAsNonRoot: false  # nginx —Ç—Ä–µ–±—É–µ—Ç root –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—É 80
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
            add:
              - CHOWN
              - SETGID
              - SETUID
      
      volumes:
      - name: api-content
        configMap:
          name: fraud-api-demo-content

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fraud-api-demo-content
  namespace: fraud-detection
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>üõ°Ô∏è Fraud Detection API - Demo</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
            .container { max-width: 800px; margin: auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
            .header { text-align: center; color: #2c3e50; }
            .status { padding: 15px; background: #d4edda; border: 1px solid #c3e6cb; border-radius: 5px; margin: 20px 0; }
            .endpoint { background: #e9ecef; padding: 15px; margin: 10px 0; border-radius: 5px; }
            .method { display: inline-block; background: #007bff; color: white; padding: 5px 10px; border-radius: 3px; font-size: 12px; }
            pre { background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; }
        </style>
        <script>
            // –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –¥–ª—è Prometheus
            function updateMetrics() {
                const cpu = Math.random() * 100;
                const memory = Math.random() * 80 + 20;
                const requests = Math.floor(Math.random() * 50) + 10;
                
                document.getElementById('cpu').textContent = cpu.toFixed(1);
                document.getElementById('memory').textContent = memory.toFixed(1);
                document.getElementById('requests').textContent = requests;
            }
            
            setInterval(updateMetrics, 2000);
        </script>
    </head>
    <body onload="updateMetrics()">
        <div class="container">
            <h1 class="header">üõ°Ô∏è Fraud Detection API</h1>
            <h2 class="header">Demo Version for HW_10</h2>
            
            <div class="status">
                ‚úÖ <strong>Status:</strong> Running in Kubernetes<br>
                üéØ <strong>Purpose:</strong> –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞<br>
                üìä <strong>Replicas:</strong> 4-6 (—É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è HPA)
            </div>
            
            <h3>üìä Real-time Metrics</h3>
            <div class="endpoint">
                üñ•Ô∏è <strong>CPU Usage:</strong> <span id="cpu">0</span>%<br>
                üíæ <strong>Memory Usage:</strong> <span id="memory">0</span>%<br>
                üìà <strong>Requests/sec:</strong> <span id="requests">0</span>
            </div>
            
            <h3>üîó API Endpoints</h3>
            
            <div class="endpoint">
                <span class="method">GET</span> <strong>/</strong><br>
                <em>–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API (—ç—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞)</em>
            </div>
            
            <div class="endpoint">
                <span class="method">GET</span> <strong>/health</strong><br>
                <em>Health check endpoint</em>
            </div>
            
            <div class="endpoint">
                <span class="method">GET</span> <strong>/metrics</strong><br>
                <em>Prometheus metrics</em>
            </div>
            
            <div class="endpoint">
                <span class="method">POST</span> <strong>/predict</strong><br>
                <em>Fraud prediction endpoint (demo)</em>
                <pre>{
  "transaction_id": "demo_123",
  "amount": 150.75,
  "merchant_category": "restaurant"
}</pre>
            </div>
            
            <h3>üéØ –¶–µ–ª–∏ HW_10</h3>
            <ul>
                <li>‚úÖ –ê–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥ –æ—Ç 4 –¥–æ 6 —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤</li>
                <li>‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å Prometheus –∏ Grafana</li>
                <li>‚úÖ –ê–ª–µ—Ä—Ç–∏–Ω–≥ –ø—Ä–∏ >80% CPU</li>
                <li>‚úÖ Airflow –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏</li>
                <li>‚úÖ Kafka —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</li>
            </ul>
            
            <h3>üîß –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
            <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏:</p>
            <pre>python scripts/kafka_stress_test.py --api-url http://&lt;EXTERNAL_IP&gt;</pre>
            
            <div class="status">
                <strong>üí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
                –í production –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π ML API –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞.
            </div>
        </div>
    </body>
    </html>
  
  health: |
    {"status": "healthy", "service": "fraud-detection-api", "version": "demo"}
  
  metrics: |
    # HELP ml_predictions_total Total ML predictions made
    # TYPE ml_predictions_total counter
    ml_predictions_total 1234
    
    # HELP ml_prediction_duration_seconds ML prediction latency
    # TYPE ml_prediction_duration_seconds histogram
    ml_prediction_duration_seconds_bucket{le="0.1"} 100
    ml_prediction_duration_seconds_bucket{le="0.5"} 200
    ml_prediction_duration_seconds_bucket{le="1.0"} 250
    ml_prediction_duration_seconds_bucket{le="+Inf"} 260
    ml_prediction_duration_seconds_sum 45.5
    ml_prediction_duration_seconds_count 260
