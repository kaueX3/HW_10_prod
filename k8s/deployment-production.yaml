apiVersion: apps/v1
kind: Deployment
metadata:
  name: fraud-detection-api
  namespace: fraud-detection
  labels:
    app.kubernetes.io/name: fraud-detection
    app.kubernetes.io/component: api
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/part-of: ml-fraud-detection
spec:
  # Изначально 4 реплики, HPA будет управлять масштабированием
  replicas: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fraud-detection
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fraud-detection
        app.kubernetes.io/component: api
        app.kubernetes.io/version: "2.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics/prometheus"
    spec:
      containers:
      - name: fraud-detection-api
        image: cr.yandex/crp7b9epa7pg8q9ud9sg/fraud-detection-api:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        # ===== РЕСУРСЫ ДЛЯ HPA =====
        resources:
          requests:
            cpu: 200m          # Минимальные ресурсы
            memory: 256Mi
          limits:
            cpu: 1000m         # Максимальные ресурсы
            memory: 1Gi
        
        # ===== HEALTH CHECKS =====
        livenessProbe:
          httpGet:
            path: /health/live
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        
        startupProbe:
          httpGet:
            path: /health/startup
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        
        # ===== ПЕРЕМЕННЫЕ ОКРУЖЕНИЯ =====
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: ENABLE_METRICS
          value: "true"
        - name: METRICS_PORT
          value: "9090"
        - name: WORKERS
          value: "2"
        
        # ===== SECRETS =====
        envFrom:
        - secretRef:
            name: api-secrets
        - configMapRef:
            name: api-config
        
        # ===== SECURITY CONTEXT =====
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        
        # ===== VOLUMES =====
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
      
      # ===== POD SETTINGS =====
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: cache-volume
        emptyDir:
          sizeLimit: 1Gi
      
      # ===== NODE SCHEDULING =====
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - fraud-detection
              topologyKey: kubernetes.io/hostname
      
      tolerations:
      - key: "ml-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
