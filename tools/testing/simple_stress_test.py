#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥–∞ HW_10
"""

import asyncio
import aiohttp
import time
import argparse
from typing import Dict, Any

class StressTest:
    def __init__(self, api_url: str, max_rps: int = 50):
        self.api_url = api_url
        self.max_rps = max_rps
        self.session = None
        self.stats = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'start_time': None
        }
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def make_request(self) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ API"""
        try:
            async with self.session.get(self.api_url, timeout=5) as response:
                self.stats['total_requests'] += 1
                if response.status == 200:
                    self.stats['successful_requests'] += 1
                    return True
                else:
                    self.stats['failed_requests'] += 1
                    return False
        except Exception as e:
            self.stats['total_requests'] += 1
            self.stats['failed_requests'] += 1
            print(f"‚ùå Request failed: {e}")
            return False
    
    async def stress_worker(self, worker_id: int, duration: int):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print(f"üöÄ Worker {worker_id} started")
        
        end_time = time.time() + duration
        request_interval = 1.0 / self.max_rps
        
        while time.time() < end_time:
            await self.make_request()
            await asyncio.sleep(request_interval)
        
        print(f"‚úÖ Worker {worker_id} completed")
    
    async def run_stress_test(self, duration: int, num_workers: int = 1):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç"""
        print(f"""
üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞:
üìç URL: {self.api_url}
‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥
üë• –í–æ—Ä–∫–µ—Ä—ã: {num_workers}
üìä –¶–µ–ª–µ–≤–æ–π RPS: {self.max_rps}
        """)
        
        self.stats['start_time'] = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
        tasks = []
        for i in range(num_workers):
            task = asyncio.create_task(self.stress_worker(i, duration))
            tasks.append(task)
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        monitor_task = asyncio.create_task(self.monitor_progress(duration))
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        await asyncio.gather(*tasks, monitor_task)
        
        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.print_final_stats()
    
    async def monitor_progress(self, duration: int):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ—Å—Ç–∞"""
        start_time = time.time()
        
        while time.time() - start_time < duration:
            elapsed = time.time() - start_time
            remaining = duration - elapsed
            
            if self.stats['total_requests'] > 0:
                success_rate = (self.stats['successful_requests'] / self.stats['total_requests']) * 100
                current_rps = self.stats['total_requests'] / elapsed if elapsed > 0 else 0
            else:
                success_rate = 0
                current_rps = 0
            
            print(f"""
üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–∞:
‚è±Ô∏è  –í—Ä–µ–º—è: {elapsed:.1f}s / {duration}s (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f}s)
üìà –ó–∞–ø—Ä–æ—Å—ã: {self.stats['total_requests']} (—É—Å–ø–µ—à–Ω—ã—Ö: {self.stats['successful_requests']})
‚úÖ Success Rate: {success_rate:.1f}%
üî• Current RPS: {current_rps:.1f}
            """)
            
            await asyncio.sleep(10)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    
    def print_final_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        elapsed = time.time() - self.stats['start_time']
        avg_rps = self.stats['total_requests'] / elapsed if elapsed > 0 else 0
        success_rate = (self.stats['successful_requests'] / self.stats['total_requests'] * 100) if self.stats['total_requests'] > 0 else 0
        
        print(f"""
üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {elapsed:.2f} —Å–µ–∫—É–Ω–¥
üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {self.stats['total_requests']}
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {self.stats['successful_requests']}
‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {self.stats['failed_requests']}
üìà –°—Ä–µ–¥–Ω–∏–π RPS: {avg_rps:.2f}
‚úÖ Success Rate: {success_rate:.2f}%
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        """)

async def main():
    parser = argparse.ArgumentParser(description='–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –¥–ª—è HW_10 API')
    parser.add_argument('--api-url', default='http://localhost:8080', help='URL API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--max-rps', type=int, default=20, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π RPS –Ω–∞ –≤–æ—Ä–∫–µ—Ä')
    parser.add_argument('--duration', type=int, default=120, help='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    parser.add_argument('--workers', type=int, default=2, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤')
    
    args = parser.parse_args()
    
    print(f"""
üõ°Ô∏è HW_10 Fraud Detection API Stress Test
=========================================
üéØ –¶–µ–ª—å: –¥–æ—Å—Ç–∏—á—å >80% CPU –∏ –∞–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥–∞ –¥–æ 6 –ø–æ–¥–æ–≤
    """)
    
    async with StressTest(args.api_url, args.max_rps) as stress_test:
        await stress_test.run_stress_test(args.duration, args.workers)
    
    print("""
‚ú® –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!
üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: kubectl get pods -n fraud-detection
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å HPA: kubectl get hpa -n fraud-detection  
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏: kubectl top pods -n fraud-detection
    """)

if __name__ == '__main__':
    asyncio.run(main())
