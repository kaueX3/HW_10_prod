#!/bin/bash

# test-complete-system.sh
# –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã HW_10
# üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ü–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞

set -e

PROJECT_ROOT=$(dirname "$(realpath "$0")")

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }
log_header() { 
    echo ""
    echo -e "${PURPLE}$1${NC}"
    echo -e "${PURPLE}$(echo "$1" | sed 's/./‚ïê/g')${NC}"
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
TESTS_PASSED=0
TESTS_FAILED=0
GOALS_ACHIEVED=0
TOTAL_GOALS=4

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–∏
check_goal() {
    local goal_name="$1"
    local test_result="$2"
    
    if [ "$test_result" = "true" ]; then
        log_success "–¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê: $goal_name"
        ((GOALS_ACHIEVED++))
    else
        log_error "–¶–ï–õ–¨ –ù–ï –î–û–°–¢–ò–ì–ù–£–¢–ê: $goal_name"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
check_system_readiness() {
    log_header "üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´"
    
    local all_ready=true
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ namespaces
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ namespaces..."
    for ns in fraud-detection monitoring airflow; do
        if kubectl get namespace "$ns" >/dev/null 2>&1; then
            log_success "Namespace $ns —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        else
            log_error "Namespace $ns –Ω–µ –Ω–∞–π–¥–µ–Ω"
            all_ready=false
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–≤
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–≤..."
    local pods_not_ready=0
    
    while IFS= read -r line; do
        namespace=$(echo "$line" | awk '{print $1}')
        pod=$(echo "$line" | awk '{print $2}')
        ready=$(echo "$line" | awk '{print $3}')
        status=$(echo "$line" | awk '{print $4}')
        
        if [[ "$ready" == *"/"* ]]; then
            ready_count=$(echo "$ready" | cut -d'/' -f1)
            total_count=$(echo "$ready" | cut -d'/' -f2)
            
            if [ "$ready_count" -eq "$total_count" ] && [ "$status" = "Running" ]; then
                log_success "Pod $namespace/$pod –≥–æ—Ç–æ–≤ ($ready)"
            else
                log_warning "Pod $namespace/$pod –Ω–µ –≥–æ—Ç–æ–≤ ($ready, $status)"
                ((pods_not_ready++))
            fi
        fi
    done < <(kubectl get pods --all-namespaces --no-headers | grep -E "(fraud-detection|monitoring|airflow)")
    
    if [ $pods_not_ready -eq 0 ]; then
        log_success "–í—Å–µ –ø–æ–¥—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ"
        return 0
    else
        log_error "$pods_not_ready –ø–æ–¥–æ–≤ –Ω–µ –≥–æ—Ç–æ–≤—ã"
        return 1
    fi
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ External IP –∞–¥—Ä–µ—Å–æ–≤
get_external_ips() {
    log_header "üîó –ü–û–õ–£–ß–ï–ù–ò–ï –ê–î–†–ï–°–û–í –î–û–°–¢–£–ü–ê"
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è External IP
    get_service_ip() {
        local service=$1
        local namespace=$2
        local ip=$(kubectl get service "$service" -n "$namespace" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
        
        if [ -n "$ip" ] && [ "$ip" != "null" ]; then
            echo "$ip"
        else
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å hostname (–¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö cloud providers)
            local hostname=$(kubectl get service "$service" -n "$namespace" -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
            if [ -n "$hostname" ] && [ "$hostname" != "null" ]; then
                echo "$hostname"
            else
                echo ""
            fi
        fi
    }
    
    GRAFANA_IP=$(get_service_ip "grafana" "monitoring")
    PROMETHEUS_IP=$(get_service_ip "prometheus" "monitoring")
    AIRFLOW_IP=$(get_service_ip "airflow-webserver" "airflow")
    API_IP=$(get_service_ip "fraud-detection-loadbalancer" "fraud-detection")
    
    # –í—ã–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å–∞
    log_info "üîó –ê–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:"
    echo "  üìä Grafana:    ${GRAFANA_IP:-pending}:3000"
    echo "  üìà Prometheus: ${PROMETHEUS_IP:-pending}:9090"  
    echo "  üåä Airflow:    ${AIRFLOW_IP:-pending}:8080"
    echo "  üõ°Ô∏è API:        ${API_IP:-pending}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    if [ -n "$API_IP" ]; then
        if curl -f -s "http://$API_IP/health/ready" >/dev/null; then
            log_success "Fraud Detection API –¥–æ—Å—Ç—É–ø–µ–Ω"
            API_AVAILABLE=true
        else
            log_warning "Fraud Detection API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            API_AVAILABLE=false
        fi
    else
        log_warning "External IP –¥–ª—è API –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        API_AVAILABLE=false
    fi
}

# –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥ (4-6 —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤)
test_autoscaling() {
    log_header "üéØ –¢–ï–°–¢ 1: –ê–í–¢–û–°–ö–ï–ô–õ–ò–ù–ì (4-6 –≠–ö–ó–ï–ú–ü–õ–Ø–†–û–í)"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–æ–≤
    local initial_replicas=$(kubectl get deployment fraud-detection-api -n fraud-detection -o jsonpath='{.status.replicas}' 2>/dev/null || echo "0")
    log_info "–ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–ª–∏–∫: $initial_replicas"
    
    if [ "$initial_replicas" -ge 4 ]; then
        log_success "–ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–ª–∏–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (‚â•4)"
    else
        log_warning "–ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–ª–∏–∫ –º–µ–Ω—å—à–µ 4"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HPA
    if kubectl get hpa fraud-detection-hpa -n fraud-detection >/dev/null 2>&1; then
        log_success "HPA –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é HPA
        local min_replicas=$(kubectl get hpa fraud-detection-hpa -n fraud-detection -o jsonpath='{.spec.minReplicas}')
        local max_replicas=$(kubectl get hpa fraud-detection-hpa -n fraud-detection -o jsonpath='{.spec.maxReplicas}')
        
        log_info "HPA –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –º–∏–Ω–∏–º—É–º $min_replicas, –º–∞–∫—Å–∏–º—É–º $max_replicas"
        
        if [ "$min_replicas" -eq 4 ] && [ "$max_replicas" -eq 6 ]; then
            log_success "HPA –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ (4-6 —Ä–µ–ø–ª–∏–∫)"
            check_goal "–ê–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥ –æ—Ç 4 –¥–æ 6 —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤" "true"
        else
            log_error "HPA –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 4-6, –ø–æ–ª—É—á–µ–Ω–æ $min_replicas-$max_replicas)"
            check_goal "–ê–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥ –æ—Ç 4 –¥–æ 6 —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤" "false"
        fi
    else
        log_error "HPA –Ω–µ –Ω–∞–π–¥–µ–Ω"
        check_goal "–ê–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥ –æ—Ç 4 –¥–æ 6 —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤" "false"
    fi
}

# –¢–µ—Å—Ç 2: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥
test_monitoring_and_alerting() {
    log_header "üéØ –¢–ï–°–¢ 2: –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –ê–õ–ï–†–¢–ò–ù–ì"
    
    local monitoring_ready=true
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Prometheus
    if [ -n "$PROMETHEUS_IP" ]; then
        if curl -f -s "http://$PROMETHEUS_IP:9090/-/ready" >/dev/null; then
            log_success "Prometheus –¥–æ—Å—Ç—É–ø–µ–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–∏–Ω–≥ –ø—Ä–∞–≤–∏–ª
            local alert_rules=$(curl -s "http://$PROMETHEUS_IP:9090/api/v1/rules" | grep -o '"FraudDetectionHighLoad"' | wc -l)
            if [ "$alert_rules" -gt 0 ]; then
                log_success "–ê–ª–µ—Ä—Ç–∏–Ω–≥ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
            else
                log_warning "–ê–ª–µ—Ä—Ç–∏–Ω–≥ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                monitoring_ready=false
            fi
        else
            log_error "Prometheus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            monitoring_ready=false
        fi
    else
        log_warning "Prometheus IP –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        monitoring_ready=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Grafana
    if [ -n "$GRAFANA_IP" ]; then
        if curl -f -s "http://$GRAFANA_IP:3000/api/health" >/dev/null; then
            log_success "Grafana –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            log_warning "Grafana –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    else
        log_warning "Grafana IP –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Alertmanager
    if kubectl get pod -n monitoring -l app.kubernetes.io/name=alertmanager >/dev/null 2>&1; then
        log_success "Alertmanager —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
    else
        log_warning "Alertmanager –Ω–µ –Ω–∞–π–¥–µ–Ω"
        monitoring_ready=false
    fi
    
    check_goal "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (Prometheus + Grafana)" "$monitoring_ready"
}

# –¢–µ—Å—Ç 3: Apache Airflow –∏ MLflow
test_airflow_mlflow() {
    log_header "üéØ –¢–ï–°–¢ 3: APACHE AIRFLOW –ò MLFLOW"
    
    local airflow_ready=true
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Airflow
    if [ -n "$AIRFLOW_IP" ]; then
        if curl -f -s "http://$AIRFLOW_IP:8080/health" >/dev/null 2>&1; then
            log_success "Airflow –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            log_warning "Airflow –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    else
        log_warning "Airflow IP –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–≤ Airflow
    local airflow_pods=$(kubectl get pods -n airflow -l app.kubernetes.io/name=airflow --no-headers | wc -l)
    if [ "$airflow_pods" -gt 0 ]; then
        log_success "Airflow –ø–æ–¥—ã –∑–∞–ø—É—â–µ–Ω—ã ($airflow_pods –ø–æ–¥–æ–≤)"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ DAG'–æ–≤
        if kubectl exec -n airflow deployment/airflow-scheduler -- airflow dags list >/dev/null 2>&1; then
            log_success "Airflow scheduler —Ä–∞–±–æ—Ç–∞–µ—Ç"
            
            # –ü–æ–∏—Å–∫ –Ω–∞—à–µ–≥–æ DAG'–∞
            if kubectl exec -n airflow deployment/airflow-scheduler -- airflow dags list | grep -q "ml_model_retraining_pipeline"; then
                log_success "DAG –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω"
            else
                log_warning "DAG –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                airflow_ready=false
            fi
        else
            log_warning "Airflow scheduler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            airflow_ready=false
        fi
    else
        log_error "Airflow –ø–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        airflow_ready=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ MLflow
    if kubectl get pod -n airflow -l app.kubernetes.io/name=mlflow >/dev/null 2>&1; then
        log_success "MLflow server —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
    else
        log_warning "MLflow server –Ω–µ –Ω–∞–π–¥–µ–Ω"
        airflow_ready=false
    fi
    
    check_goal "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Airflow –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏" "$airflow_ready"
}

# –¢–µ—Å—Ç 4: –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –∏ –∞–ª–µ—Ä—Ç—ã
test_stress_and_alerts() {
    log_header "üéØ –¢–ï–°–¢ 4: –°–¢–†–ï–°–°-–¢–ï–°–¢ –ò –ê–õ–ï–†–¢–´"
    
    if [ "$API_AVAILABLE" != "true" ]; then
        log_error "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        check_goal "–ê–ª–µ—Ä—Ç–∏–Ω–≥ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ >80% CPU" "false"
        return
    fi
    
    log_info "–ó–∞–ø—É—Å–∫ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞..."
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –Ω–∞ 2 –º–∏–Ω—É—Ç—ã
    if python3 "$PROJECT_ROOT/scripts/kafka_stress_test.py" \
        --api-url "http://$API_IP" \
        --prometheus-url "http://${PROMETHEUS_IP:-localhost}:9090" \
        --max-rps 100 \
        --ramp-up-duration 30 \
        --sustain-duration 120 \
        --ramp-down-duration 30 2>/dev/null; then
        
        log_success "–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–æ–≤
        sleep 30  # –î–∞–µ–º –≤—Ä–µ–º—è HPA —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å
        
        local current_replicas=$(kubectl get deployment fraud-detection-api -n fraud-detection -o jsonpath='{.status.replicas}')
        local desired_replicas=$(kubectl get deployment fraud-detection-api -n fraud-detection -o jsonpath='{.spec.replicas}')
        
        log_info "–¢–µ–∫—É—â–∏–µ —Ä–µ–ø–ª–∏–∫–∏: $current_replicas, –∂–µ–ª–∞–µ–º—ã–µ: $desired_replicas"
        
        if [ "$current_replicas" -gt 4 ] || [ "$desired_replicas" -gt 4 ]; then
            log_success "–ê–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥ —Å—Ä–∞–±–æ—Ç–∞–ª (—Ä–µ–ø–ª–∏–∫–∏ —É–≤–µ–ª–∏—á–∏–ª–∏—Å—å)"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã –≤ Prometheus
            if [ -n "$PROMETHEUS_IP" ]; then
                local active_alerts=$(curl -s "http://$PROMETHEUS_IP:9090/api/v1/alerts" | grep -o '"FraudDetection.*"' | wc -l 2>/dev/null || echo "0")
                if [ "$active_alerts" -gt 0 ]; then
                    log_success "–ê–ª–µ—Ä—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã ($active_alerts –∞–ª–µ—Ä—Ç–æ–≤)"
                    check_goal "–ê–ª–µ—Ä—Ç–∏–Ω–≥ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ >80% CPU" "true"
                else
                    log_warning "–ê–ª–µ—Ä—Ç—ã –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏)"
                    check_goal "–ê–ª–µ—Ä—Ç–∏–Ω–≥ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ >80% CPU" "false"
                fi
            else
                log_warning "Prometheus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"
                check_goal "–ê–ª–µ—Ä—Ç–∏–Ω–≥ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ >80% CPU" "false"
            fi
        else
            log_warning "–ê–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–∞ –±–æ–ª—å—à–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)"
            check_goal "–ê–ª–µ—Ä—Ç–∏–Ω–≥ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ >80% CPU" "false"
        fi
    else
        log_error "–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π"
        check_goal "–ê–ª–µ—Ä—Ç–∏–Ω–≥ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ >80% CPU" "false"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
generate_final_report() {
    log_header "üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"
    
    echo ""
    log_info "üéØ –î–û–°–¢–ò–ñ–ï–ù–ò–ï –¶–ï–õ–ï–ô –ü–†–û–ï–ö–¢–ê:"
    echo "   –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ: $GOALS_ACHIEVED –∏–∑ $TOTAL_GOALS —Ü–µ–ª–µ–π"
    
    local success_rate=$((GOALS_ACHIEVED * 100 / TOTAL_GOALS))
    
    if [ $success_rate -eq 100 ]; then
        log_success "üéâ –í–°–ï –¶–ï–õ–ò –î–û–°–¢–ò–ì–ù–£–¢–´! ($success_rate%)"
        echo ""
        echo "‚úÖ –ê–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥ –æ—Ç 4 –¥–æ 6 —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"
        echo "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å Prometheus –∏ Grafana"  
        echo "‚úÖ Airflow –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"
        echo "‚úÖ –ê–ª–µ—Ä—Ç–∏–Ω–≥ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ"
        
    elif [ $success_rate -ge 75 ]; then
        log_success "üåü –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¶–ï–õ–ï–ô –î–û–°–¢–ò–ì–ù–£–¢–û! ($success_rate%)"
        
    elif [ $success_rate -ge 50 ]; then
        log_warning "‚ö° –ü–û–õ–û–í–ò–ù–ê –¶–ï–õ–ï–ô –î–û–°–¢–ò–ì–ù–£–¢–ê ($success_rate%)"
        
    else
        log_error "‚ö†Ô∏è –ú–ê–õ–û –¶–ï–õ–ï–ô –î–û–°–¢–ò–ì–ù–£–¢–û ($success_rate%)"
    fi
    
    echo ""
    log_info "üîó –î–û–°–¢–£–ü –ö –°–ò–°–¢–ï–ú–ï:"
    if [ -n "$GRAFANA_IP" ]; then
        echo "   üìä Grafana Dashboard: http://$GRAFANA_IP:3000"
    fi
    if [ -n "$PROMETHEUS_IP" ]; then
        echo "   üìà Prometheus: http://$PROMETHEUS_IP:9090/alerts"
    fi
    if [ -n "$AIRFLOW_IP" ]; then
        echo "   üåä Airflow: http://$AIRFLOW_IP:8080"
    fi
    if [ -n "$API_IP" ]; then
        echo "   üõ°Ô∏è API Documentation: http://$API_IP/docs"
    fi
    
    echo ""
    log_info "üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"
    if [ $success_rate -lt 100 ]; then
        echo "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø–æ–¥–æ–≤: kubectl logs -n NAMESPACE POD_NAME"
        echo "   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ External IP –Ω–∞–∑–Ω–∞—á–µ–Ω—ã"
        echo "   ‚Ä¢ –î–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏"
        echo "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ—Å—É—Ä—Å—ã –∫–ª–∞—Å—Ç–µ—Ä–∞: kubectl top nodes"
    fi
    echo "   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ Grafana"
    echo "   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã"
    echo "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ DAG'–∏ –≤ Airflow"
    
    echo ""
    if [ $success_rate -eq 100 ]; then
        log_success "üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö PRODUCTION –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!"
    else
        log_warning "üîß –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –ù–ê–°–¢–†–û–ô–ö–ò"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_header "üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ HW_10"
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ production ML —Å–∏—Å—Ç–µ–º—ã —Å –∞–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥–æ–º –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"
    
    # –≠—Ç–∞–ø—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    check_system_readiness
    get_external_ips
    test_autoscaling
    test_monitoring_and_alerting  
    test_airflow_mlflow
    test_stress_and_alerts
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    generate_final_report
    
    echo ""
    log_header "üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    if [ $GOALS_ACHIEVED -eq $TOTAL_GOALS ]; then
        exit 0
    else
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫
main "$@"
