#!/bin/bash

# deploy-all.sh
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤—Å–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã HW_10
# üöÄ ML Fraud Detection —Å –∞–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥–æ–º, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥–æ–º

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ

PROJECT_ROOT=$(dirname "$(dirname "$(realpath "$0")")")
K8S_DIR="${PROJECT_ROOT}/k8s"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_header() {
    echo ""
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}$(echo "$1" | sed 's/./-/g')${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è kubectl
check_prerequisites() {
    log_header "üîç Checking Prerequisites"
    
    if ! command -v kubectl &> /dev/null; then
        log_error "kubectl –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ kubectl –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–ª–∞—Å—Ç–µ—Ä—É"
        exit 1
    fi
    
    if ! kubectl cluster-info &> /dev/null; then
        log_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Kubernetes –∫–ª–∞—Å—Ç–µ—Ä—É"
        exit 1
    fi
    
    log_success "kubectl –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–ª–∞—Å—Ç–µ—Ä—É"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Ç–µ—Ä–µ
    CLUSTER_INFO=$(kubectl cluster-info | head -1)
    log_info "–ö–ª–∞—Å—Ç–µ—Ä: $CLUSTER_INFO"
    
    NODES=$(kubectl get nodes --no-headers | wc -l)
    log_info "–£–∑–ª–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ: $NODES"
}

# –°–æ–∑–¥–∞–Ω–∏–µ namespace'–æ–≤
create_namespaces() {
    log_header "üèóÔ∏è Creating Namespaces"
    
    kubectl apply -f "${K8S_DIR}/namespace.yaml"
    log_success "Namespaces —Å–æ–∑–¥–∞–Ω—ã"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ namespace'—ã
    log_info "–°–æ–∑–¥–∞–Ω–Ω—ã–µ namespaces:"
    kubectl get namespaces fraud-detection monitoring airflow --no-headers | while read line; do
        log_info "  ‚Ä¢ $line"
    done
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (Prometheus + Grafana + Alertmanager)
deploy_monitoring() {
    log_header "üìä Deploying Monitoring Stack"
    
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Prometheus..."
    kubectl apply -f "${K8S_DIR}/monitoring/prometheus-config.yaml"
    kubectl apply -f "${K8S_DIR}/monitoring/prometheus-deployment.yaml"
    
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Alertmanager..."
    kubectl apply -f "${K8S_DIR}/monitoring/alertmanager.yaml"
    
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Grafana..."
    kubectl apply -f "${K8S_DIR}/monitoring/grafana-deployment.yaml"
    
    log_success "Monitoring stack —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ pods
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ monitoring pods..."
    kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=prometheus -n monitoring --timeout=300s
    kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n monitoring --timeout=300s
    kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=alertmanager -n monitoring --timeout=300s
    
    log_success "Monitoring stack –≥–æ—Ç–æ–≤"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Airflow
deploy_airflow() {
    log_header "üåä Deploying Apache Airflow"
    
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ PostgreSQL –¥–ª—è Airflow..."
    kubectl apply -f "${K8S_DIR}/airflow/postgres.yaml"
    
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."
    kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=postgres -n airflow --timeout=300s
    
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ MLflow Server..."
    kubectl apply -f "${K8S_DIR}/airflow/mlflow-server.yaml"
    
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Airflow..."
    kubectl apply -f "${K8S_DIR}/airflow/airflow-deployment.yaml"
    
    log_success "Airflow —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Airflow pods..."
    kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=airflow -n airflow --timeout=600s
    
    log_success "Airflow –≥–æ—Ç–æ–≤"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Fraud Detection API
deploy_fraud_detection_api() {
    log_header "üõ°Ô∏è Deploying Fraud Detection API"
    
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ ConfigMap –∏ Secrets..."
    kubectl apply -f "${K8S_DIR}/configmap.yaml"
    
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ Service..."
    kubectl apply -f "${K8S_DIR}/service.yaml"
    
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ API..."
    kubectl apply -f "${K8S_DIR}/deployment-production.yaml"
    
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ HPA (Horizontal Pod Autoscaler)..."
    kubectl apply -f "${K8S_DIR}/hpa.yaml"
    
    log_success "Fraud Detection API —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ pods
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API pods..."
    kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=fraud-detection -n fraud-detection --timeout=300s
    
    log_success "Fraud Detection API –≥–æ—Ç–æ–≤"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
check_deployment_status() {
    log_header "üîç Checking Deployment Status"
    
    echo ""
    log_info "üìä Monitoring Namespace:"
    kubectl get pods -n monitoring -o wide
    
    echo ""
    log_info "üåä Airflow Namespace:"
    kubectl get pods -n airflow -o wide
    
    echo ""
    log_info "üõ°Ô∏è Fraud Detection Namespace:"
    kubectl get pods -n fraud-detection -o wide
    
    echo ""
    log_info "üîÑ HPA Status:"
    kubectl get hpa -n fraud-detection
    
    echo ""
    log_info "üì° Services:"
    kubectl get services --all-namespaces | grep -E "(monitoring|airflow|fraud-detection)"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ URL'–æ–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
get_access_urls() {
    log_header "üîó Access URLs"
    
    # –ü–æ–ª—É—á–∞–µ–º External IPs
    GRAFANA_IP=$(kubectl get service grafana -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
    PROMETHEUS_IP=$(kubectl get service prometheus -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
    AIRFLOW_IP=$(kubectl get service airflow-webserver -n airflow -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
    FRAUD_API_IP=$(kubectl get service fraud-detection-loadbalancer -n fraud-detection -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
    
    echo ""
    log_info "üìä Grafana Dashboard:"
    if [ "$GRAFANA_IP" != "pending" ]; then
        echo "   üîó http://$GRAFANA_IP:3000"
        echo "   üë§ admin / admin123"
    else
        echo "   ‚è≥ External IP –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ: kubectl get service grafana -n monitoring"
    fi
    
    echo ""
    log_info "üìà Prometheus:"
    if [ "$PROMETHEUS_IP" != "pending" ]; then
        echo "   üîó http://$PROMETHEUS_IP:9090"
    else
        echo "   ‚è≥ External IP –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ: kubectl get service prometheus -n monitoring"
    fi
    
    echo ""
    log_info "üåä Airflow Web UI:"
    if [ "$AIRFLOW_IP" != "pending" ]; then
        echo "   üîó http://$AIRFLOW_IP:8080"
        echo "   üë§ admin / admin"
    else
        echo "   ‚è≥ External IP –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ: kubectl get service airflow-webserver -n airflow"
    fi
    
    echo ""
    log_info "üõ°Ô∏è Fraud Detection API:"
    if [ "$FRAUD_API_IP" != "pending" ]; then
        echo "   üîó http://$FRAUD_API_IP/docs"
        echo "   üîó http://$FRAUD_API_IP/health/ready"
    else
        echo "   ‚è≥ External IP –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ: kubectl get service fraud-detection-loadbalancer -n fraud-detection"
    fi
    
    echo ""
    log_info "üìã Port Forward –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ LoadBalancer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω):"
    echo "   kubectl port-forward -n monitoring svc/grafana 3000:3000"
    echo "   kubectl port-forward -n monitoring svc/prometheus 9090:9090"
    echo "   kubectl port-forward -n airflow svc/airflow-webserver 8080:8080"
    echo "   kubectl port-forward -n fraud-detection svc/fraud-detection-service 8000:80"
}

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
print_testing_instructions() {
    log_header "üß™ Testing Instructions"
    
    echo ""
    log_info "1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ API:"
    echo "   curl http://FRAUD_API_IP/health/ready"
    echo "   curl http://FRAUD_API_IP/"
    
    echo ""
    log_info "2Ô∏è‚É£ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞:"
    echo "   cd ${PROJECT_ROOT}"
    echo "   python scripts/kafka_stress_test.py --api-url http://FRAUD_API_IP --max-rps 200"
    
    echo ""
    log_info "3Ô∏è‚É£ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥–∞:"
    echo "   watch kubectl get hpa -n fraud-detection"
    echo "   watch kubectl get pods -n fraud-detection"
    
    echo ""
    log_info "4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤:"
    echo "   Grafana: http://GRAFANA_IP:3000 ‚Üí Alerting ‚Üí Alert Rules"
    echo "   Prometheus: http://PROMETHEUS_IP:9090/alerts"
    
    echo ""
    log_info "5Ô∏è‚É£ –ó–∞–ø—É—Å–∫ DAG'–∞ –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è:"
    echo "   Airflow: http://AIRFLOW_IP:8080 ‚Üí DAGs ‚Üí ml_model_retraining_pipeline"
    
    echo ""
    log_warning "üéØ –¶–µ–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    echo "   ‚Ä¢ –ê–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥ –æ—Ç 4 –¥–æ 6 —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"
    echo "   ‚Ä¢ –ê–ª–µ—Ä—Ç –ø—Ä–∏ 6 —ç–∫–∑–µ–º–ø–ª—è—Ä–∞—Ö –∏ >80% CPU –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç"
    echo "   ‚Ä¢ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"
    echo "   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ Grafana"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_header "üöÄ ML Fraud Detection Production Deployment"
    log_info "–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
    
    # –≠—Ç–∞–ø—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    check_prerequisites
    create_namespaces
    deploy_monitoring
    deploy_airflow
    deploy_fraud_detection_api
    
    echo ""
    log_success "üéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!"
    
    # –°—Ç–∞—Ç—É—Å –∏ URL'—ã
    check_deployment_status
    get_access_urls
    print_testing_instructions
    
    echo ""
    log_success "üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
    log_info "–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è External IP –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)"
}

# –ó–∞–ø—É—Å–∫
main "$@"
